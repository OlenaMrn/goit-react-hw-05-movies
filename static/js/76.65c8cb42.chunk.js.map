{"version":3,"file":"static/js/76.65c8cb42.chunk.js","mappings":"wSAAMA,EAAW,gCACXC,EAAU,mCAAhB,SAEeC,EAAY,GAAZA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA2BC,GAA3B,uFACyBC,MAAMD,GAD/B,WACQE,EADR,QAEgBC,GAFhB,sBAGU,IAAIC,MAAM,wCAHpB,gCAKSF,EAASG,QALlB,kEASO,SAASC,IACZ,OAAOP,EAAY,GAAD,OAAIF,EAAJ,uCAA2CC,GAEhE,CAEM,SAASS,EAAaC,GAC3B,OAAOT,EAAY,GAAD,OAAIF,EAAJ,kBAAsBW,EAAtB,oBAAyCV,GAC5D,CACM,SAASW,EAAgBD,GAC9B,OAAOT,EAAY,GAAD,OAAIF,EAAJ,kBAAsBW,EAAtB,4BAAiDV,GACpE,CACM,SAASY,EAAaF,GAC3B,OAAOT,EAAY,GAAD,OAAIF,EAAJ,kBAAsBW,EAAtB,4BAAiDV,GACpE,CACM,SAASa,EAAkBC,GAChC,OAAOb,EAAY,GAAD,OACbF,EADa,+BACkBe,EADlB,oBACmCd,GAEtD,C,gHC7BD,GAAgB,UAAY,wBAAwB,QAAU,sBAAsB,SAAW,uBAAuB,WAAa,yBAAyB,WAAa,0B,mBCkDzK,EA7Ca,WACX,IAAQU,GAAYK,EAAAA,EAAAA,MAAZL,QACR,GAAwBM,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,IACbR,EAAAA,EAAAA,IAAaF,GACVY,MAAK,SAAAlB,GACJc,EAAQd,EAASa,MACjBG,GAAa,EACd,IACAG,OAAM,SAAAC,GACLC,QAAQD,MAAMA,GACdJ,GAAa,EACd,GACJ,GAAE,CAACV,IAEAS,GACK,gBAAKO,UAAWC,EAAAA,WAAhB,UAAgC,SAAC,IAAD,MAGrB,IAAhBV,EAAKW,QACA,cAAGF,UAAWC,EAAAA,WAAd,SAA8B,mBAIrC,gBAAKD,UAAWC,EAAAA,UAAhB,SACGV,EAAKY,KACJ,gBAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,aAAlB,OACEA,IACE,iBAAyBL,UAAWC,EAAAA,UAApC,WACE,gBACEK,IAAG,yCAAoCD,GACvCE,IAAKH,EACLJ,UAAWC,EAAAA,WAEb,cAAGD,UAAWC,EAAAA,SAAd,SAA6BG,MANrBA,EAFd,KAcP,C,qEChDD,EAAyB,uB,SCKlB,SAASI,IACd,OACE,gBAAKR,UAAWS,EAAhB,UACE,SAAC,KAAD,CACEC,OAAQ,GACRC,MAAO,GACPC,MAAM,oBACNC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,UAAU,eACVC,eAAe,oBACfC,YAAa,EACbC,qBAAsB,KAI7B,C","sources":["API/movieApi.js","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","components/Loader/Loader.module.css","components/Loader/Loader.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'cd645533d11f1e46be7243753c49caff';\n\nasync function fetchMovies(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Error occurred while fetching movies');\n  }\n  return response.json();\n}\n\n\nexport function getTrendingMovies() {\n    return fetchMovies(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n    \n}\n\nexport function getMovieById(movieId) {\n  return fetchMovies(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\n}\nexport function getMovieReviews(movieId) {\n  return fetchMovies(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);\n}\nexport function getMovieCast(movieId) {\n  return fetchMovies(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n}\nexport function getMoviesBySearch(query) {\n  return fetchMovies(\n    `${BASE_URL}/search/movie?query=${query}&api_key=${API_KEY}`\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Cast_container__iz+ye\",\"castImg\":\"Cast_castImg__T4WbF\",\"castName\":\"Cast_castName__-i08u\",\"reviewText\":\"Cast_reviewText__xOkDq\",\"loaderWrap\":\"Cast_loaderWrap__FRq5v\"};","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'API/movieApi';\nimport css from './Cast.module.css';\nimport { OvalLoader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getMovieCast(movieId)\n      .then(response => {\n        setCast(response.cast);\n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.error(error);\n        setIsLoading(false);\n      });\n  }, [movieId]);\n\n  if (isLoading) {\n    return <div className={css.loaderWrap}><OvalLoader/></div>;\n  }\n\n  if (cast.length === 0) {\n    return <p className={css.reviewText}>No Cast Found</p>;\n  }\n\n  return (\n    <div className={css.container}>\n      {cast.map(\n        ({ original_name, profile_path }) =>\n          profile_path && (\n            <div key={original_name} className={css.imageWrap}>\n              <img\n                src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                alt={original_name}\n                className={css.castImg}\n              />\n              <p className={css.castName}>{original_name}</p>\n            </div>\n          )\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__+lRPl\"};","\n\n\nimport { Oval } from 'react-loader-spinner';\nimport styles from './Loader.module.css';\n\nexport function OvalLoader() {\n  return (\n    <div className={styles.loader}>\n      <Oval\n        height={80}\n        width={80}\n        color=\"rgb(245, 107, 15)\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        ariaLabel=\"oval-loading\"\n        secondaryColor=\"rgb(245, 107, 15)\"\n        strokeWidth={2}\n        strokeWidthSecondary={2}\n      />\n    </div>\n  );\n}\n\n"],"names":["BASE_URL","API_KEY","fetchMovies","url","fetch","response","ok","Error","json","getTrendingMovies","getMovieById","movieId","getMovieReviews","getMovieCast","getMoviesBySearch","query","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","then","catch","error","console","className","css","length","map","original_name","profile_path","src","alt","OvalLoader","styles","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary"],"sourceRoot":""}