{"version":3,"file":"static/js/638.6d54acd6.chunk.js","mappings":"ySAAMA,EAAW,gCACXC,EAAU,mCAAhB,SAEeC,EAAY,GAAZA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA2BC,GAA3B,uFACyBC,MAAMD,GAD/B,WACQE,EADR,QAEgBC,GAFhB,sBAGU,IAAIC,MAAM,wCAHpB,gCAKSF,EAASG,QALlB,kEASO,SAASC,IACZ,OAAOP,EAAY,GAAD,OAAIF,EAAJ,uCAA2CC,GAEhE,CAEM,SAASS,EAAaC,GAC3B,OAAOT,EAAY,GAAD,OAAIF,EAAJ,kBAAsBW,EAAtB,oBAAyCV,GAC5D,CACM,SAASW,EAAgBD,GAC9B,OAAOT,EAAY,GAAD,OAAIF,EAAJ,kBAAsBW,EAAtB,4BAAiDV,GACpE,CACM,SAASY,EAAaF,GAC3B,OAAOT,EAAY,GAAD,OAAIF,EAAJ,kBAAsBW,EAAtB,4BAAiDV,GACpE,CACM,SAASa,EAAkBC,GAChC,OAAOb,EAAY,GAAD,OACbF,EADa,+BACkBe,EADlB,oBACmCd,GAEtD,C,qEC7BD,EAAyB,uB,SCKlB,SAASe,IACd,OACE,gBAAKC,UAAWC,EAAhB,UACE,SAAC,KAAD,CACEC,OAAQ,GACRC,MAAO,GACPC,MAAM,oBACNC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,UAAU,eACVC,eAAe,oBACfC,YAAa,EACbC,qBAAsB,KAI7B,C,0HCtBD,EAA4B,0BAA5B,EAAmE,2BAAnE,EAA6G,6BAA7G,EAAuJ,2BAAvJ,EAA+L,2BAA/L,EAAyO,6B,SCsDzO,EAjDe,WACb,IAAQjB,GAAYkB,EAAAA,EAAAA,MAAZlB,QACR,GAA8BmB,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAiBF,OAbGC,EAAAA,EAAAA,YAAU,WACTD,GAAa,IACbtB,EAAAA,EAAAA,IAAgBD,GACbyB,MAAK,SAAA/B,GACJ2B,EAAW3B,EAASgC,SACpBH,GAAa,EACd,IACAI,OAAM,SAAAC,GACLC,QAAQD,MAAMA,GACdL,GAAa,EACd,GACJ,GAAE,CAACvB,IAEFsB,GAEA,gBAAKhB,UAAWwB,EAAhB,UACE,SAAC,IAAD,MAKiB,IAAnBV,EAAQW,QACH,cAAGzB,UAAWwB,EAAd,SAAgC,qBAKrC,gBAAKxB,UAAWwB,EAAhB,SACGV,EAAQW,OACPX,EAAQY,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACV,iBAAkB5B,UAAWwB,EAA7B,WACE,cAAGxB,UAAWwB,EAAd,SAAiCG,KACjC,cAAG3B,UAAWwB,EAAd,SAA+BI,MAFvBD,EADA,KAOZ,cAAG3B,UAAWwB,EAAd,SAA8B,sBAIrC,C","sources":["API/movieApi.js","components/Loader/Loader.module.css","components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/Review/Review.module.css?3727","components/Review/Review.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'cd645533d11f1e46be7243753c49caff';\n\nasync function fetchMovies(url) {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Error occurred while fetching movies');\n  }\n  return response.json();\n}\n\n\nexport function getTrendingMovies() {\n    return fetchMovies(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n    \n}\n\nexport function getMovieById(movieId) {\n  return fetchMovies(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\n}\nexport function getMovieReviews(movieId) {\n  return fetchMovies(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);\n}\nexport function getMovieCast(movieId) {\n  return fetchMovies(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n}\nexport function getMoviesBySearch(query) {\n  return fetchMovies(\n    `${BASE_URL}/search/movie?query=${query}&api_key=${API_KEY}`\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__+lRPl\"};","\n\n\nimport { Oval } from 'react-loader-spinner';\nimport styles from './Loader.module.css';\n\nexport function OvalLoader() {\n  return (\n    <div className={styles.loader}>\n      <Oval\n        height={80}\n        width={80}\n        color=\"rgb(245, 107, 15)\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        ariaLabel=\"oval-loading\"\n        secondaryColor=\"rgb(245, 107, 15)\"\n        strokeWidth={2}\n        strokeWidthSecondary={2}\n      />\n    </div>\n  );\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Review_container__YSRqB\",\"reviewText\":\"Review_reviewText__I4lRM\",\"reviewAuthor\":\"Review_reviewAuthor__Y4JIT\",\"reviewWrap\":\"Review_reviewWrap__4DEgg\",\"loaderWrap\":\"Review_loaderWrap__LS4n6\",\"noReviewText\":\"Review_noReviewText__x1JZR\"};","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'API/movieApi';\nimport { OvalLoader } from 'components/Loader/Loader';\nimport css from './Review.module.css'\n\nconst Review = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n\n\n   useEffect(() => {\n    setIsLoading(true);\n    getMovieReviews(movieId)\n      .then(response => {\n        setReviews(response.results);\n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.error(error);\n        setIsLoading(false);\n      });\n  }, [movieId]);\n\nif (isLoading) {\n  return (\n    <div className={css.loaderWrap}>\n      <OvalLoader />\n    </div>\n  );\n}\n\nif (reviews.length === 0) {\n  return <p className={css.noReviewText}>No Review Found</p>;\n}\n\n\n  return (\n    <div className={css.container}>\n      {reviews.length ? (\n        reviews.map(({ author, content }) => (\n          <div key={author} className={css.reviewWrap}>\n            <p className={css.reviewAuthor}>{author}</p>\n            <p className={css.reviewText}>{content}</p>\n          </div>\n        ))\n      ) : (\n        <p className={css.reviewText}>No Reviews Found</p>\n      )}\n    </div>\n  );\n};\n\nexport default Review;\n"],"names":["BASE_URL","API_KEY","fetchMovies","url","fetch","response","ok","Error","json","getTrendingMovies","getMovieById","movieId","getMovieReviews","getMovieCast","getMoviesBySearch","query","OvalLoader","className","styles","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","then","results","catch","error","console","css","length","map","author","content"],"sourceRoot":""}